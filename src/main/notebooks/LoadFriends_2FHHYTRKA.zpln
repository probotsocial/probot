{
  "paragraphs": [
    {
      "text": "import org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.DataFrame\nfinal val sparkSession \u003d SparkSession.builder().getOrCreate()\nclass Request {\n  val baseDir \u003d \"/data\"\n  val inputPath \u003d \"friends.jsonl\"\n  val inputFormat \u003d \"json\"\n  val jdbcDriver \u003d \"org.postgresql.Driver\"\n  val jdbcUser \u003d \"postgres\"\n  val jdbcPassword \u003d \"postgres\"\n  val jdbcUrl \u003d \"jdbc:postgresql://postgres:5432/postgres\"\n}\nval request \u003d new Request\nval friend_follows_jsons : DataFrame \u003d sparkSession.sqlContext.read.format(\"json\").load(request.baseDir + \"/\" + request.inputPath)\nfriend_follows_jsons.createOrReplaceTempView(\"friend_follows_jsons\")\nval friends_df \u003d friend_follows_jsons.select(\"followee.id\", \"followee\").orderBy(desc(\"followee.status.created_at\")).groupBy(\"id\").agg(first(\"followee\").as(\"followee\"))\nfriends_df.createOrReplaceTempView(\"friends_df\")\nval friends_json_df \u003d sparkSession.sqlContext.sql(\"\"\"\nselect\n    concat(\u0027twitter:\u0027, id) as id,\n    to_json(followee) as json\nfrom friends_df\n\"\"\")\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-19 18:09:22.905",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.DataFrame\n\u001b[1m\u001b[34msparkSession\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.SparkSession\u001b[0m \u003d org.apache.spark.sql.SparkSession@230f85f0\ndefined class Request\n\u001b[1m\u001b[34mrequest\u001b[0m: \u001b[1m\u001b[32mRequest\u001b[0m \u003d Request@4c945f08\n\u001b[1m\u001b[34mfriend_follows_jsons\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [followee: struct\u003ccontributors_enabled: boolean, created_at: string ... 31 more fields\u003e, follower: struct\u003cid: bigint\u003e]\n\u001b[1m\u001b[34mfriends_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [id: bigint, followee: struct\u003ccontributors_enabled: boolean, created_at: string ... 31 more fields\u003e]\n\u001b[1m\u001b[34mfriends_json_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [id: string, json: string]\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1597856006181_-375673429",
      "id": "paragraph_1597855829753_1384814972",
      "dateCreated": "2020-08-19 16:53:26.181",
      "dateStarted": "2020-08-19 18:09:22.916",
      "dateFinished": "2020-08-19 18:09:23.266",
      "status": "FINISHED"
    },
    {
      "text": "val jdbc_options \u003d  Map(\n  \"user\" -\u003e request.jdbcUser,\n  \"password\" -\u003e request.jdbcPassword,\n  \"url\" -\u003e request.jdbcUrl,\n  \"driver\" -\u003e request.jdbcDriver,\n  \"fetchSize\" -\u003e \"100\",\n  \"numPartitions\" -\u003e \"1\"\n)\nval jdbc_properties \u003d new java.util.Properties\njdbc_properties.setProperty(\"driver\", request.jdbcDriver)\njdbc_properties.setProperty(\"user\", request.jdbcUser)\njdbc_properties.setProperty(\"password\", request.jdbcPassword)\njdbc_properties.setProperty(\"stringtype\", \"unspecified\")\nfriends_json_df.count()\nfriends_json_df.write.mode(\"append\").jdbc(request.jdbcUrl, \"friends_json\", jdbc_properties)",
      "user": "anonymous",
      "dateUpdated": "2020-08-19 18:09:56.996",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mjdbc_options\u001b[0m: \u001b[1m\u001b[32mscala.collection.immutable.Map[String,String]\u001b[0m \u003d Map(url -\u003e jdbc:postgresql://postgres:5432/postgres, fetchSize -\u003e 100, driver -\u003e org.postgresql.Driver, user -\u003e postgres, numPartitions -\u003e 1, password -\u003e postgres)\n\u001b[1m\u001b[34mjdbc_properties\u001b[0m: \u001b[1m\u001b[32mjava.util.Properties\u001b[0m \u003d {user\u003dpostgres, stringtype\u003dunspecified, password\u003dpostgres, driver\u003dorg.postgresql.Driver}\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1597856006181_897927123",
      "id": "paragraph_1597855875248_1590970754",
      "dateCreated": "2020-08-19 16:53:26.181",
      "dateStarted": "2020-08-19 18:09:57.008",
      "dateFinished": "2020-08-19 18:10:03.843",
      "status": "FINISHED"
    },
    {
      "user": "anonymous",
      "dateUpdated": "2020-08-19 17:26:34.751",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1597856006182_-144491168",
      "id": "paragraph_1597855922016_-1373510817",
      "dateCreated": "2020-08-19 16:53:26.182",
      "status": "FINISHED"
    }
  ],
  "name": "LoadFriends",
  "id": "2FHHYTRKA",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}